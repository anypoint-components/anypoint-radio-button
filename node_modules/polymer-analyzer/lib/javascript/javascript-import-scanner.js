"use strict";
/**
 * @license
 * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const whatwg_url_1 = require("whatwg-url");
const model_1 = require("../model/model");
const isWindows = require("is-windows");
const resolve = require("resolve");
const isPathSpecifier = (s) => /^\.{0,2}\//.test(s);
class JavaScriptImportScanner {
    constructor(options) {
        this.moduleResolution = options && options.moduleResolution;
    }
    scan(document, visit) {
        return __awaiter(this, void 0, void 0, function* () {
            const imports = [];
            const warnings = [];
            const scanner = this;
            yield visit({
                enterCallExpression(node, _) {
                    // TODO(usergenic): There's no babel.Import type or babel.isImport()
                    // function right now, we have to just check the type property
                    // here until there is; please change to use babel.isImport(node.callee)
                    // once it is a thing.
                    if (node.callee.type !== 'Import') {
                        return;
                    }
                    if (node.arguments.length !== 1) {
                        warnings.push(new model_1.Warning({
                            message: 'Malformed import',
                            sourceRange: document.sourceRangeForNode(node),
                            severity: model_1.Severity.WARNING,
                            code: 'malformed-import',
                            parsedDocument: document,
                        }));
                        return;
                    }
                    const arg = node.arguments[0];
                    if (arg.type !== 'StringLiteral') {
                        warnings.push(new model_1.Warning({
                            message: 'Cannot analyze dynamic imports with non-literal arguments',
                            sourceRange: document.sourceRangeForNode(node),
                            severity: model_1.Severity.WARNING,
                            code: 'non-literal-import',
                            parsedDocument: document,
                        }));
                        return;
                    }
                    imports.push(new model_1.ScannedImport('js-import', scanner._resolveSpecifier(arg.value, document, node, warnings), document.sourceRangeForNode(node), document.sourceRangeForNode(node.callee), node, true));
                },
                enterImportDeclaration(node, _) {
                    imports.push(new model_1.ScannedImport('js-import', scanner._resolveSpecifier(node.source.value, document, node, warnings), document.sourceRangeForNode(node), document.sourceRangeForNode(node.source), node, false));
                },
                enterExportAllDeclaration(node, _parent) {
                    imports.push(new model_1.ScannedImport('js-import', scanner._resolveSpecifier(node.source.value, document, node, warnings), document.sourceRangeForNode(node), document.sourceRangeForNode(node.source), node, false));
                },
                enterExportNamedDeclaration(node, _parent) {
                    if (node.source == null) {
                        return;
                    }
                    imports.push(new model_1.ScannedImport('js-import', scanner._resolveSpecifier(node.source.value, document, node, warnings), document.sourceRangeForNode(node), document.sourceRangeForNode(node.source), node, false));
                }
            });
            return { features: imports, warnings };
        });
    }
    _resolveSpecifier(specifier, document, node, warnings) {
        if (isPathSpecifier(specifier)) {
            return specifier;
        }
        try {
            new whatwg_url_1.URL(specifier);
            return specifier;
        }
        catch (e) {
            // not a parsable URL, try to resolve
        }
        if (this.moduleResolution !== 'node') {
            warnings.push(new model_1.Warning({
                message: 'Cannot resolve module specifier with no module resolution ' +
                    'algorithm set',
                sourceRange: document.sourceRangeForNode(node),
                severity: model_1.Severity.WARNING,
                code: 'cant-resolve-module-specifier',
                parsedDocument: document,
            }));
            return undefined;
        }
        const documentURL = new whatwg_url_1.URL(document.baseUrl);
        if (documentURL.protocol !== 'file:') {
            warnings.push(new model_1.Warning({
                message: 'Cannot resolve module specifier in non-local document',
                sourceRange: document.sourceRangeForNode(node),
                severity: model_1.Severity.WARNING,
                code: 'cant-resolve-module-specifier',
                parsedDocument: document,
            }));
            return undefined;
        }
        let documentPath = decodeURIComponent(documentURL.pathname);
        if (isWindows() && documentPath.startsWith('/')) {
            documentPath = documentPath.substring(1);
        }
        let resolvedSpecifier;
        try {
            resolvedSpecifier = resolve.sync(specifier, { basedir: documentPath });
        }
        catch (e) {
            warnings.push(new model_1.Warning({
                message: 'Cannot resolve module specifier',
                sourceRange: document.sourceRangeForNode(node),
                severity: model_1.Severity.WARNING,
                code: 'cant-resolve-module-specifier',
                parsedDocument: document,
            }));
            return undefined;
        }
        let relativeSpecifierUrl = path_1.relative(path_1.dirname(documentPath), resolvedSpecifier);
        if (isWindows()) {
            // normalize path separators to URL format
            relativeSpecifierUrl =
                relativeSpecifierUrl.replace(/\\/g, '/');
        }
        if (!isPathSpecifier(relativeSpecifierUrl)) {
            relativeSpecifierUrl = './' + relativeSpecifierUrl;
        }
        return relativeSpecifierUrl;
    }
}
exports.JavaScriptImportScanner = JavaScriptImportScanner;

//# sourceMappingURL=javascript-import-scanner.js.map
