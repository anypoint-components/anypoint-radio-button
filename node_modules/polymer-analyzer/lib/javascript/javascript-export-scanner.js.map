{"version":3,"sources":["javascript/javascript-export-scanner.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAuBH,MAAM,kBAAkB,GAAwB,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;AACpE;IAUE,YACI,OAAmB,EAAE,WAAkC,EACvD,QAA8B;QAXzB,UAAK,GAAG,kBAAkB,CAAC;QAC3B,gBAAW,GAAG,IAAI,GAAG,EAAE,CAAC;QAMxB,aAAQ,GAA2B,EAAE,CAAC;QAK7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,0BAA0B,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,wBAAwB,CAAC,CAAC,CAAC;YACrD,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC,CAAC;oBAC7C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAED,qEAAqE;IACrE,uCAAuC;IACvC,OAAO,CAAC,SAAmB;QACzB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;CACF;AAhCD,wBAgCC;AAED;IACQ,IAAI,CACN,QAA4B,EAC5B,KAA0C;;YAC5C,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,MAAM,QAAQ,GAAc,EAAE,CAAC;YAE/B,MAAM,KAAK,CAAC;gBACV,2BAA2B,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI;oBAC7C,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1E,CAAC;gBACD,yBAAyB,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI;oBAC3C,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1E,CAAC;gBACD,6BAA6B,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI;oBAC/C,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;gBAC1E,CAAC;aACF,CAAC,CAAC;YACH,MAAM,CAAC,EAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAC,CAAC;QACvC,CAAC;KAAA;CACF;AApBD,0DAoBC","file":"javascript-export-scanner.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {NodePath} from 'babel-traverse';\nimport * as babel from 'babel-types';\n\nimport {Document, Feature, SourceRange, Warning} from '../model/model';\nimport {Resolvable} from '../model/resolvable';\n\nimport {Visitor} from './estree-visitor';\nimport {JavaScriptDocument} from './javascript-document';\nimport {JavaScriptScanner} from './javascript-scanner';\n\nexport type ExportNode = babel.ExportNamedDeclaration|\n                         babel.ExportAllDeclaration|\n                         babel.ExportDefaultDeclaration;\n\n\ndeclare module '../model/queryable' {\n  interface FeatureKindMap {\n    'export': Export;\n  }\n}\n\nconst scannedExportKinds: ReadonlySet<string> = new Set(['export']);\nexport class Export implements Resolvable, Feature {\n  readonly kinds = scannedExportKinds;\n  readonly identifiers = new Set();\n  readonly description: undefined;\n  readonly jsdoc: undefined;\n  readonly sourceRange: SourceRange|undefined;\n  readonly astNodePath: NodePath<babel.Node>;\n  readonly astNode: ExportNode;\n  readonly warnings: ReadonlyArray<Warning> = [];\n\n  constructor(\n      astNode: ExportNode, sourceRange: SourceRange|undefined,\n      nodePath: NodePath<babel.Node>) {\n    this.astNode = astNode;\n    if (astNode.type === 'ExportDefaultDeclaration') {\n      this.identifiers.add('default');\n    } else if (astNode.type === 'ExportNamedDeclaration') {\n      for (const specifier of astNode.specifiers) {\n        if (specifier.exported.type === 'Identifier') {\n          this.identifiers.add(specifier.exported.name);\n        }\n      }\n    }\n    this.astNodePath = nodePath;\n    this.sourceRange = sourceRange;\n  }\n\n  // It's immutable, and it doesn't care about other documents, so it's\n  // both a ScannedFeature and a Feature.\n  resolve(_document: Document): Feature|undefined {\n    return this;\n  }\n}\n\nexport class JavaScriptExportScanner implements JavaScriptScanner {\n  async scan(\n      document: JavaScriptDocument,\n      visit: (visitor: Visitor) => Promise<void>) {\n    const exports: Export[] = [];\n    const warnings: Warning[] = [];\n\n    await visit({\n      enterExportNamedDeclaration(node, _parent, path) {\n        exports.push(new Export(node, document.sourceRangeForNode(node), path));\n      },\n      enterExportAllDeclaration(node, _parent, path) {\n        exports.push(new Export(node, document.sourceRangeForNode(node), path));\n      },\n      enterExportDefaultDeclaration(node, _parent, path) {\n        exports.push(new Export(node, document.sourceRangeForNode(node), path));\n      }\n    });\n    return {features: exports, warnings};\n  }\n}\n"]}