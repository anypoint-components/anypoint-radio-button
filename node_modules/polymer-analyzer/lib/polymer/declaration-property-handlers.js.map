{"version":3,"sources":["polymer/declaration-property-handlers.ts"],"names":[],"mappings":"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","file":"declaration-property-handlers.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Scope} from 'babel-traverse';\nimport * as babel from 'babel-types';\n\nimport * as astValue from '../javascript/ast-value';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\nimport {Result} from '../model/analysis';\nimport {ScannedReference, Severity, Warning} from '../model/model';\n\nimport {analyzeProperties} from './analyze-properties';\nimport {parseExpressionInJsStringLiteral} from './expression-scanner';\nimport {Observer, ScannedPolymerElement} from './polymer-element';\n\nexport type BehaviorReferenceOrWarning = {\n  kind: 'warning',\n  warning: Warning\n}|{kind: 'behaviorReference', reference: ScannedReference<'behavior'>};\n\nexport function getBehaviorReference(\n    argNode: babel.Node, document: JavaScriptDocument, scope: Scope):\n    Result<ScannedReference<'behavior'>, Warning> {\n  const behaviorName = astValue.getIdentifierName(argNode);\n  if (!behaviorName) {\n    return {\n      successful: false,\n      error: new Warning({\n        code: 'could-not-determine-behavior-name',\n        message: `Could not determine behavior name from expression of type ` +\n            `${argNode.type}`,\n        severity: Severity.WARNING,\n        sourceRange: document.sourceRangeForNode(argNode)!,\n        parsedDocument: document\n      })\n    };\n  }\n  return {\n    successful: true,\n    value: new ScannedReference(\n        'behavior',\n        behaviorName,\n        document.sourceRangeForNode(argNode)!,\n        argNode,\n        scope)\n  };\n}\n\nexport type PropertyHandlers = {\n  [key: string]: (node: babel.Node) => void\n};\n\n\n/**\n * Returns an object containing functions that will annotate `declaration` with\n * the polymer-specific meaning of the value nodes for the named properties.\n */\nexport function declarationPropertyHandlers(\n    declaration: ScannedPolymerElement,\n    document: JavaScriptDocument,\n    scope: Scope): PropertyHandlers {\n  return {\n    is(node: babel.Node) {\n      if (babel.isLiteral(node)) {\n        declaration.tagName = '' + astValue.expressionToValue(node);\n      }\n    },\n    properties(node: babel.Node) {\n      for (const prop of analyzeProperties(node, document)) {\n        declaration.addProperty(prop);\n      }\n    },\n    behaviors(node: babel.Node) {\n      if (!babel.isArrayExpression(node)) {\n        return;\n      }\n      for (const element of node.elements) {\n        const result = getBehaviorReference(element, document, scope);\n        if (result.successful === false) {\n          declaration.warnings.push(result.error);\n        } else {\n          declaration.behaviorAssignments.push(result.value);\n        }\n      }\n    },\n    observers(node: babel.Node) {\n      const observers = extractObservers(node, document);\n      if (!observers) {\n        return;\n      }\n      declaration.warnings = declaration.warnings.concat(observers.warnings);\n      declaration.observers = declaration.observers.concat(observers.observers);\n    },\n    listeners(node: babel.Node) {\n      if (!babel.isObjectExpression(node)) {\n        declaration.warnings.push(new Warning({\n          code: 'invalid-listeners-declaration',\n          message: '`listeners` property should be an object expression',\n          severity: Severity.WARNING,\n          sourceRange: document.sourceRangeForNode(node)!,\n          parsedDocument: document\n        }));\n        return;\n      }\n\n      for (const p of node.properties) {\n        if (babel.isSpreadProperty(p)) {\n          continue;\n        }\n        const evtName =\n            babel.isLiteral(p.key) && astValue.expressionToValue(p.key) ||\n            babel.isIdentifier(p.key) && p.key.name;\n        const handler =\n            !babel.isLiteral(p.value) || astValue.expressionToValue(p.value);\n\n        if (typeof evtName !== 'string' || typeof handler !== 'string') {\n          // TODO (maklesoft): Notifiy the user somehow that a listener entry\n          // was not extracted\n          // because the event or handler namecould not be statically analyzed.\n          // E.g. add a low-severity\n          // warning once opting out of rules is supported.\n          continue;\n        }\n\n        declaration.listeners.push({event: evtName, handler: handler});\n      }\n    }\n  };\n}\n\n\nexport function extractObservers(\n    observersArray: babel.Node, document: JavaScriptDocument): undefined|\n    {observers: Observer[], warnings: Warning[]} {\n  if (!babel.isArrayExpression(observersArray)) {\n    return;\n  }\n  let warnings: Warning[] = [];\n  const observers = [];\n  for (const element of observersArray.elements) {\n    let v = astValue.expressionToValue(element);\n    if (v === undefined) {\n      v = astValue.CANT_CONVERT;\n    }\n    const parseResult =\n        parseExpressionInJsStringLiteral(document, element, 'callExpression');\n    warnings = warnings.concat(parseResult.warnings);\n    observers.push({\n      javascriptNode: element,\n      expression: v,\n      parsedExpression: parseResult.databinding\n    });\n  }\n  return {observers, warnings};\n}\n"]}