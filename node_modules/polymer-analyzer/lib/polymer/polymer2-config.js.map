{"version":3,"sources":["polymer/polymer2-config.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,qCAAqC;AAErC,oDAAoD;AACpD,uDAA0D;AAG1D,6DAAuD;AAGvD,8BACI,IAAkD,EAClD,IAAY;IACd,MAAM,MAAM,GACR,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CACf,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI;QAC9C,CAAC,CAAC,IAAI,KAAK,KAAK,IAAI,6BAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,CAC5C,CAAC;IACtB,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACZ,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,qEAAqE;IACrE,8EAA8E;IAC9E,0EAA0E;IAC1E,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;IAC/B,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,kCAAkC;QAClC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAE,CAAC;IACtC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACxC,qCAAqC;QACrC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC5B,CAAC;AA3BD,oDA2BC;AAED,oBAA2B,IACqB;IAC9C,MAAM,WAAW,GAAG,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrD,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAClD,2BAA2B;QAC3B,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,MAAM,KAAK,GAAG,QAAQ,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;IACtD,EAAE,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC9B,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AAZD,gCAYC;AAED;;GAEG;AACH,8BACI,IAAgB,EAAE,QAA4B;IAChD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtE,MAAM,CAAC,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,cAAc,GAAG,oBAAoB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAChE,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,sCAAiB,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3E,CAAC;AAPD,oDAOC","file":"polymer2-config.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as babel from 'babel-types';\n\nimport * as astValue from '../javascript/ast-value';\nimport {getIdentifierName} from '../javascript/ast-value';\nimport {JavaScriptDocument} from '../javascript/javascript-document';\n\nimport {analyzeProperties} from './analyze-properties';\nimport {ScannedPolymerProperty} from './polymer-element';\n\nexport function getStaticGetterValue(\n    node: babel.ClassDeclaration|babel.ClassExpression,\n    name: string): babel.Expression|undefined|null {\n  const getter =\n      node.body.body.find(\n          (n) => babel.isClassMethod(n) && n.static === true &&\n              n.kind === 'get' && getIdentifierName(n.key) === name) as\n      babel.ClassMethod;\n  if (!getter) {\n    return undefined;\n  }\n\n  // TODO(justinfagnani): consider generating warnings for these checks\n  // TODO(usergenic): I'm not sure this conversion below here makes sense...  Do\n  // we semantically want this `getter.body` to replace `getter.value.body`?\n  const getterBody = getter.body;\n  if (getterBody.body.length !== 1) {\n    // not a single statement function\n    return undefined;\n  }\n  const statement = getterBody.body[0]!;\n  if (!babel.isReturnStatement(statement)) {\n    // we only support a return statement\n    return undefined;\n  }\n\n  return statement.argument;\n}\n\nexport function getIsValue(node: babel.ClassDeclaration|\n                           babel.ClassExpression): string|undefined {\n  const getterValue = getStaticGetterValue(node, 'is');\n  if (!getterValue || !babel.isLiteral(getterValue)) {\n    // we only support literals\n    return undefined;\n  }\n  const value = astValue.expressionToValue(getterValue);\n  if (typeof value !== 'string') {\n    return undefined;\n  }\n  return value;\n}\n\n/**\n * Returns the properties defined in a Polymer config object literal.\n */\nexport function getPolymerProperties(\n    node: babel.Node, document: JavaScriptDocument): ScannedPolymerProperty[] {\n  if (!babel.isClassDeclaration(node) && !babel.isClassExpression(node)) {\n    return [];\n  }\n  const propertiesNode = getStaticGetterValue(node, 'properties');\n  return propertiesNode ? analyzeProperties(propertiesNode, document) : [];\n}\n"]}