{"version":3,"sources":["model/reference.ts"],"names":[],"mappings":"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","file":"reference.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {Scope} from 'babel-traverse';\nimport * as babel from 'babel-types';\n\nimport {Annotation} from '../javascript/jsdoc';\n\nimport {Document} from './document';\nimport {Feature, ScannedFeature} from './feature';\nimport {FeatureKindMap} from './queryable';\nimport {Resolvable} from './resolvable';\nimport {SourceRange} from './source-range';\nimport {Severity, Warning} from './warning';\n\n\n/**\n * A reference to another feature by identifier.\n */\nexport class ScannedReference<K extends keyof FeatureKindMap> extends\n    ScannedFeature implements Resolvable {\n  readonly identifier: string;\n  readonly kind: K;\n  readonly sourceRange: SourceRange|undefined;\n  readonly scope: Scope;\n  readonly astNode: babel.Node|undefined;\n\n  constructor(\n      kind: K, identifier: string, sourceRange: SourceRange|undefined,\n      astNode: babel.Node|undefined, scope: Scope, description?: string,\n      jsdoc?: Annotation, warnings?: Warning[]) {\n    super(sourceRange, astNode, description, jsdoc, warnings);\n    this.kind = kind;\n    this.astNode = astNode;\n    this.scope = scope;\n    this.sourceRange = sourceRange;\n    this.identifier = identifier;\n  }\n\n  resolve(document: Document): Reference<FeatureKindMap[K]> {\n    return this.resolveWithKind(document, this.kind);\n  }\n\n  // Leaving this as a public method, in case we want to use a more\n  // specific kind (e.g. resolve a PolymerElement rather than just a Class).\n  resolveWithKind<DK extends keyof FeatureKindMap>(\n      document: Document, kind: DK): Reference<FeatureKindMap[DK]> {\n    const features = document.getFeatures(\n        {imported: true, externalPackages: true, kind, id: this.identifier});\n    const warnings = [...this.warnings];\n    if (this.sourceRange) {\n      if (features.size === 0) {\n        let message = `Could not resolve reference to ${this.kind}`;\n        if (kind === 'behavior') {\n          message += `. Is it annotated with @polymerBehavior?`;\n        }\n        warnings.push(new Warning({\n          code: 'could-not-resolve-reference',\n          sourceRange: this.sourceRange,\n          message,\n          parsedDocument: document.parsedDocument,\n          severity: Severity.WARNING\n        }));\n      } else if (features.size > 1) {\n        warnings.push(new Warning({\n          code: 'multiple-global-declarations',\n          sourceRange: this.sourceRange,\n          message: `Multiple global declarations of ${\n              this.kind} with identifier ${this.identifier}`,\n          parsedDocument: document.parsedDocument,\n          severity: Severity.WARNING\n        }));\n      }\n    }\n    let feature: undefined|FeatureKindMap[DK];\n    [feature] = features;\n    return new Reference<FeatureKindMap[K]>(this, feature, warnings);\n  }\n}\n\n\ndeclare module './queryable' {\n  interface FeatureKindMap {\n    'reference': Reference<Feature>;\n  }\n}\n\nconst referenceSet: ReadonlySet<'reference'> =\n    new Set<'reference'>(['reference']);\nconst emptySet: ReadonlySet<string> = new Set();\n\n/**\n * A reference to another feature by identifier.\n */\nexport class Reference<F extends Feature> implements Feature {\n  readonly kinds = referenceSet;\n  readonly identifiers = emptySet;\n  readonly identifier: string;\n  readonly sourceRange: SourceRange|undefined;\n  readonly astNode: any;\n  readonly feature: F|undefined;\n  readonly warnings: ReadonlyArray<Warning>;\n\n  constructor(\n      scannedReference: ScannedReference<any>, feature: F|undefined,\n      warnings: ReadonlyArray<Warning>) {\n    this.identifier = scannedReference.identifier;\n    this.sourceRange = scannedReference.sourceRange;\n    this.warnings = warnings;\n    this.feature = feature;\n  }\n}\n"]}