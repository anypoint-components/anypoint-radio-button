{"version":3,"sources":["url-loader/redirect-resolver.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;AAEH,6BAA8C;AAI9C,iDAA2C;AAE3C;;GAEG;AACH,sBAA8B,SAAQ,0BAAW;IAC/C,YACqB,UAAuB,EACvB,aAAqB,EACrB,WAAmB;QACtC,KAAK,EAAE,CAAC;QAHW,eAAU,GAAV,UAAU,CAAa;QACvB,kBAAa,GAAb,aAAa,CAAQ;QACrB,gBAAW,GAAX,WAAW,CAAQ;IAExC,CAAC;IAED,OAAO,CACH,QAAwC,EAAE,SAA2B,EACrE,OAAuB;QACzB,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,GAC5C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,kBAAkB,GACpB,IAAI,CAAC,eAAe,CAAC,aAAc,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;QACjE,EAAE,CAAC,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,eAAe,CACvB,IAAI,CAAC,WAAW;gBAChB,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;QAC3D,CAAC;QACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,kBAAkB,CAAC;QAC5B,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAID,QAAQ,CAAC,QAAqB,EAAE,OAAqB,EAAE,KAAc;QAEnE,IAAI,IAAI,EAAE,EAAE,CAAC;QACb,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1B,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;YACvB,EAAE,GAAG,QAAQ,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,GAAG,QAAQ,CAAC;YAChB,EAAE,GAAG,OAAO,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC1E,EAAE,GAAG,IAAI,CAAC,eAAe,CACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9D,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;IACH,CAAC;CACF;AAjDD,4CAiDC","file":"redirect-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {resolve as urlLibResolver} from 'url';\n\nimport {FileRelativeUrl, PackageRelativeUrl, ResolvedUrl, ScannedImport} from '../model/model';\n\nimport {UrlResolver} from './url-resolver';\n\n/**\n * Resolves a URL having one prefix to another URL with a different prefix.\n */\nexport class RedirectResolver extends UrlResolver {\n  constructor(\n      private readonly packageUrl: ResolvedUrl,\n      private readonly _redirectFrom: string,\n      private readonly _redirectTo: string) {\n    super();\n  }\n\n  resolve(\n      firstUrl: ResolvedUrl|PackageRelativeUrl, secondUrl?: FileRelativeUrl,\n      _import?: ScannedImport): ResolvedUrl|undefined {\n    const [baseUrl = this.packageUrl, unresolvedUrl] =\n        this.getBaseAndUnresolved(firstUrl, secondUrl);\n    const packageRelativeUrl =\n        this.brandAsResolved(urlLibResolver(baseUrl, unresolvedUrl));\n    if (packageRelativeUrl.startsWith(this._redirectFrom)) {\n      return this.brandAsResolved(\n          this._redirectTo +\n          packageRelativeUrl.slice(this._redirectFrom.length));\n    }\n    if (packageRelativeUrl.startsWith(this._redirectTo)) {\n      return packageRelativeUrl;\n    }\n    return undefined;\n  }\n\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, _kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    let from, to;\n    if (maybeTo === undefined) {\n      from = this.packageUrl;\n      to = fromOrTo;\n    } else {\n      from = fromOrTo;\n      to = maybeTo;\n    }\n    if (!from.startsWith(this._redirectTo) && to.startsWith(this._redirectTo)) {\n      to = this.brandAsResolved(\n          this._redirectFrom + to.slice(this._redirectTo.length));\n    }\n    const result = this.simpleUrlRelative(from, to);\n    if (maybeTo === undefined) {\n      return this.brandAsPackageRelative(result);\n    } else {\n      return result;\n    }\n  }\n}\n"]}