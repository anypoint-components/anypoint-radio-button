{"version":3,"sources":["url-loader/fs-url-loader.ts"],"names":[],"mappings":"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","file":"fs-url-loader.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2015 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as fs from 'fs';\nimport * as pathlib from 'path';\nimport pathIsInside = require('path-is-inside');\nimport Uri from 'vscode-uri';\n\nimport {ResolvedUrl} from '../index';\nimport {Result} from '../model/analysis';\nimport {PackageRelativeUrl} from '../model/url';\n\nimport {UrlLoader} from './url-loader';\n\n/**\n * Resolves requests via the file system.\n */\nexport class FSUrlLoader implements UrlLoader {\n  root: string;\n\n  constructor(root: string = '') {\n    this.root = pathlib.resolve(root);\n  }\n\n  canLoad(url: ResolvedUrl): boolean {\n    const parsed = Uri.parse(url);\n    return parsed.scheme === 'file' && !parsed.authority &&\n        pathIsInside(parsed.fsPath, this.root);\n  }\n\n  load(url: ResolvedUrl): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const result = this.getFilePath(url);\n      if (!result.successful) {\n        throw new Error(`FSUrlLoader can not load url ${\n            JSON.stringify(url)} - ${result.error}`);\n      }\n      fs.readFile(result.value, 'utf8', (error: Error, contents: string) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(contents);\n        }\n      });\n    });\n  }\n\n  /**\n   * If successful, result.value will be the filesystem path that we would load\n   * the given url from.\n   *\n   * If unsuccessful, result.value will be an error message as a string.\n   */\n  getFilePath(url: ResolvedUrl): Result<string, string> {\n    if (!url.startsWith('file://')) {\n      return {successful: false, error: 'Not a local file:// url.'};\n    }\n    if (!this.canLoad(url)) {\n      return {\n        successful: false,\n        error: `Path is not inside root directory: ${JSON.stringify(this.root)}`\n      };\n    }\n    const path = Uri.parse(url).fsPath;\n    return {successful: true, value: path};\n  }\n\n  async readDirectory(pathFromRoot: string, deep?: boolean):\n      Promise<PackageRelativeUrl[]> {\n    const files = await new Promise<string[]>((resolve, reject) => {\n      fs.readdir(\n          pathlib.join(this.root, pathFromRoot),\n          (err, files) => err ? reject(err) : resolve(files));\n    });\n    const results = [];\n    const subDirResultPromises = [];\n    for (const basename of files) {\n      const file = pathlib.join(pathFromRoot, basename);\n      const stat = await new Promise<fs.Stats>(\n          (resolve, reject) => fs.stat(\n              pathlib.join(this.root, file),\n              (err, stat) => err ? reject(err) : resolve(stat)));\n      if (stat.isDirectory()) {\n        if (deep) {\n          subDirResultPromises.push(this.readDirectory(file, deep));\n        }\n      } else {\n        results.push(file as PackageRelativeUrl);\n      }\n    }\n    const arraysOfFiles = await Promise.all(subDirResultPromises);\n    for (const dirResults of arraysOfFiles) {\n      for (const file of dirResults) {\n        results.push(file as PackageRelativeUrl);\n      }\n    }\n    return results;\n  }\n}\n"]}