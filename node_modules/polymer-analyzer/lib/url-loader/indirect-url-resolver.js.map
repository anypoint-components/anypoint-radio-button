{"version":3,"sources":["url-loader/indirect-url-resolver.ts"],"names":[],"mappings":"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","file":"indirect-url-resolver.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {FileRelativeUrlBrand, PackageRelativeUrl, UrlResolver} from '../index';\nimport {FileRelativeUrl, ResolvedUrl} from '../model/url';\n\nimport {FsUrlResolver} from './fs-url-resolver';\n\ntype RuntimeUrl = string&RuntimeUrlBrand;\n\n\n// Declare these as classes rather than interfaces so that the properties\n// can be private.\ndeclare class RuntimeUrlBrand extends FileRelativeUrlBrand {\n  private RuntimeUrlBrand: never;\n}\n\n/**\n * A URL resolver for very large codebases where source files map in an\n * arbitrary but predetermined fashion onto URL space.\n *\n * It also separates the root directory – the root of all source code that's\n * legal to load – from the package directory, which is how the user refers to\n * files on the CLI or the IDE.\n */\nexport class IndirectUrlResolver extends FsUrlResolver implements UrlResolver {\n  private readonly runtimeUrlToResolvedUrl:\n      ReadonlyMap<RuntimeUrl, ResolvedUrl>;\n  private readonly resolvedUrlToRuntimeUrl:\n      ReadonlyMap<ResolvedUrl, RuntimeUrl>;\n\n  /**\n   * @param rootPath All loadable source code must be a descendent of this\n   *     directory. Should be the same as FsUrlLoader's rootPath.\n   * @param packagePath The base directory for package-relative paths. Usually\n   *     the current working directory.\n   * @param indirectionMap Maps the runtime URL space to the paths for those\n   *     files on the filesystem.\n   *\n   *     The keys must be relative paths, like `paper-button/paper-button.html`.\n   *     The filesystem paths must be be relative FS paths from `rootPath` to\n   *     the file on disk that corresponds to the runtime URL.\n   */\n  constructor(\n      rootPath: string, packagePath: string,\n      indirectionMap: Map<string, string>) {\n    super(packagePath);\n\n    const rootResolver = new FsUrlResolver(rootPath);\n    const urlspaceToFilesystem = new Map<RuntimeUrl, ResolvedUrl>();\n    const filesystemToUrlspace = new Map<ResolvedUrl, RuntimeUrl>();\n    for (const [u, fsPath] of indirectionMap) {\n      const url = u as RuntimeUrl;\n      const fsUrl = rootResolver.resolve(this.brandAsPackageRelative(fsPath));\n      if (fsUrl === undefined) {\n        throw new Error(`Invalid fs path in indirection map: ${fsPath}`);\n      }\n      urlspaceToFilesystem.set(url, fsUrl);\n      filesystemToUrlspace.set(fsUrl, url);\n    }\n    this.runtimeUrlToResolvedUrl = urlspaceToFilesystem;\n    this.resolvedUrlToRuntimeUrl = filesystemToUrlspace;\n  }\n\n  resolve(\n      firstHref: ResolvedUrl|PackageRelativeUrl,\n      secondHref?: FileRelativeUrl): ResolvedUrl|undefined {\n    const [baseUrl, unresolvedHref] =\n        this.getBaseAndUnresolved(firstHref, secondHref);\n    // If we're just resolving a package-relative url, do the basic thing.\n    if (baseUrl === undefined) {\n      return super.resolve(this.brandAsPackageRelative(unresolvedHref));\n    }\n    const url = this.brandAsFileRelative(unresolvedHref);\n    const runtimeBaseUrl = this.resolvedUrlToRuntimeUrl.get(baseUrl);\n    if (runtimeBaseUrl === undefined) {\n      return super.resolve(baseUrl, url);\n    }\n    const runtimeUrl = this.runtimeResolve(url, runtimeBaseUrl);\n    const resolvedUrl = this.runtimeUrlToResolvedUrl.get(runtimeUrl);\n    if (resolvedUrl === undefined) {\n      return super.resolve(baseUrl, url);\n    }\n    return resolvedUrl;\n  }\n\n  private runtimeResolve(\n      url: FileRelativeUrl|PackageRelativeUrl,\n      runtimeBaseUrl: RuntimeUrl): RuntimeUrl {\n    const resolved: ResolvedUrl =\n        this.simpleUrlResolve(this.brandAsResolved(runtimeBaseUrl), url);\n    return resolved as any as RuntimeUrl;\n  }\n\n  relative(to: ResolvedUrl): PackageRelativeUrl;\n  relative(from: ResolvedUrl, to: ResolvedUrl, _kind?: string): FileRelativeUrl;\n  relative(fromOrTo: ResolvedUrl, maybeTo?: ResolvedUrl, _kind?: string):\n      FileRelativeUrl|PackageRelativeUrl {\n    const [from, to] = (maybeTo !== undefined) ? [fromOrTo, maybeTo] :\n                                                 [this.packageUrl, fromOrTo];\n    return this.relativeImpl(from, to);\n  }\n\n  private relativeImpl(from: ResolvedUrl, to: ResolvedUrl): FileRelativeUrl {\n    const fromWeb = this.resolvedUrlToRuntimeUrl.get(from);\n    const toWeb = this.resolvedUrlToRuntimeUrl.get(to);\n    if (fromWeb === undefined || toWeb === undefined) {\n      return this.simpleUrlRelative(from, to);\n    }\n    return this.simpleUrlRelative(\n        this.brandAsResolved(fromWeb), this.brandAsResolved(toWeb));\n  }\n}\n"]}