{"version":3,"sources":["core/analysis-context.ts"],"names":[],"mappings":"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","file":"analysis-context.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport * as path from 'path';\n\nimport {ForkOptions, LazyEdgeMap, NoKnownParserError, Options, ScannerTable} from '../core/analyzer';\nimport {CssCustomPropertyScanner} from '../css/css-custom-property-scanner';\nimport {CssParser} from '../css/css-parser';\nimport {HtmlCustomElementReferenceScanner} from '../html/html-element-reference-scanner';\nimport {HtmlImportScanner} from '../html/html-import-scanner';\nimport {HtmlParser} from '../html/html-parser';\nimport {HtmlScriptScanner} from '../html/html-script-scanner';\nimport {HtmlStyleScanner} from '../html/html-style-scanner';\nimport {ClassScanner} from '../javascript/class-scanner';\nimport {FunctionScanner} from '../javascript/function-scanner';\nimport {InlineHtmlDocumentScanner} from '../javascript/html-template-literal-scanner';\nimport {JavaScriptImportScanner} from '../javascript/javascript-import-scanner';\nimport {JavaScriptParser} from '../javascript/javascript-parser';\nimport {NamespaceScanner} from '../javascript/namespace-scanner';\nimport {JsonParser} from '../json/json-parser';\nimport {Document, InlineDocInfo, LocationOffset, ScannedDocument, ScannedElement, ScannedImport, ScannedInlineDocument, Severity, Warning, WarningCarryingException} from '../model/model';\nimport {PackageRelativeUrl, ResolvedUrl} from '../model/url';\nimport {ParsedDocument, UnparsableParsedDocument} from '../parser/document';\nimport {Parser} from '../parser/parser';\nimport {BehaviorScanner} from '../polymer/behavior-scanner';\nimport {CssImportScanner} from '../polymer/css-import-scanner';\nimport {DomModuleScanner} from '../polymer/dom-module-scanner';\nimport {PolymerCoreFeatureScanner} from '../polymer/polymer-core-feature-scanner';\nimport {PolymerElementScanner} from '../polymer/polymer-element-scanner';\nimport {PseudoElementScanner} from '../polymer/pseudo-element-scanner';\nimport {scan} from '../scanning/scan';\nimport {Scanner} from '../scanning/scanner';\nimport {PackageUrlResolver} from '../url-loader/package-url-resolver';\nimport {UrlLoader} from '../url-loader/url-loader';\nimport {UrlResolver} from '../url-loader/url-resolver';\n\nimport {AnalysisCache} from './analysis-cache';\nimport {LanguageAnalyzer} from './language-analyzer';\n\nexport const analyzerVersion: string = require('../../package.json').version;\n\n/**\n * An analysis of a set of files at a specific point-in-time with respect to\n * updates to those files. New files can be added to an existing context, but\n * updates to files will cause a fork of the context with new analysis results.\n *\n * All file contents and analysis results are consistent within a single\n * anaysis context. A context is forked via either the fileChanged or\n * clearCaches methods.\n *\n * For almost all purposes this is an entirely internal implementation detail.\n * An Analyzer instance has a reference to its current context, so it will\n * appear to be statefull with respect to file updates.\n */\nexport class AnalysisContext {\n  readonly parsers = new Map<string, Parser<ParsedDocument>>([\n    ['html', new HtmlParser()],\n    ['js', new JavaScriptParser()],\n    ['css', new CssParser()],\n    ['json', new JsonParser()],\n  ]);\n\n  private readonly _languageAnalyzers = new Map<string, LanguageAnalyzer<any>>([\n    // TODO(rictic): add typescript language analyzer back after investigating\n    //     https://github.com/Polymer/polymer-analyzer/issues/623\n  ]);\n\n  /** A map from import url to urls that document lazily depends on. */\n  private readonly _lazyEdges: LazyEdgeMap|undefined;\n\n  private readonly _scanners: ScannerTable;\n\n  readonly loader: UrlLoader;\n  readonly resolver: UrlResolver;\n\n  private readonly _cache: AnalysisCache;\n\n  /** Incremented each time we fork. Useful for debugging. */\n  private readonly _generation: number;\n\n  /**\n   * Resolves when the previous analysis has completed.\n   *\n   * Used to serialize analysis requests, not for correctness surprisingly\n   * enough, but for performance, so that we can reuse AnalysisResults.\n   */\n  private _analysisComplete: Promise<void>;\n\n  static getDefaultScanners(options: Options) {\n    return new Map<string, Scanner<any, any, any>[]>([\n      [\n        'html',\n        [\n          new HtmlImportScanner(options.lazyEdges),\n          new HtmlScriptScanner(),\n          new HtmlStyleScanner(),\n          new DomModuleScanner(),\n          new CssImportScanner(),\n          new HtmlCustomElementReferenceScanner(),\n          new PseudoElementScanner(),\n        ]\n      ],\n      [\n        'js',\n        [\n          new PolymerElementScanner(),\n          new PolymerCoreFeatureScanner(),\n          new BehaviorScanner(),\n          new NamespaceScanner(),\n          new FunctionScanner(),\n          new ClassScanner(),\n          new JavaScriptImportScanner(\n              {moduleResolution: options.moduleResolution}),\n          new InlineHtmlDocumentScanner(),\n        ]\n      ],\n      ['css', [new CssCustomPropertyScanner()]]\n    ]);\n  }\n\n  constructor(options: Options, cache?: AnalysisCache, generation?: number) {\n    this.loader = options.urlLoader;\n    this.resolver = options.urlResolver || new PackageUrlResolver();\n    this.parsers = options.parsers || this.parsers;\n    this._lazyEdges = options.lazyEdges;\n    this._scanners =\n        options.scanners || AnalysisContext.getDefaultScanners(options);\n    this._cache = cache || new AnalysisCache();\n    this._generation = generation || 0;\n    this._analysisComplete = Promise.resolve();\n  }\n\n  /**\n   * Returns a copy of this cache context with proper cache invalidation.\n   */\n  filesChanged(urls: PackageRelativeUrl[]) {\n    const newCache = this._cache.invalidate(this.resolveUserInputUrls(urls));\n    return this._fork(newCache);\n  }\n\n  /**\n   * Implements Analyzer#analyze, see its docs.\n   */\n  async analyze(urls: PackageRelativeUrl[]): Promise<AnalysisContext> {\n    const resolvedUrls = this.resolveUserInputUrls(urls);\n\n    // 1. Await current analysis if there is one, so we can check to see if has\n    // all of the requested URLs.\n    await this._analysisComplete;\n\n    // 2. Check to see if we have all of the requested documents\n    const hasAllDocuments = resolvedUrls.every(\n        (url) => this._cache.analyzedDocuments.get(url) != null);\n    if (hasAllDocuments) {\n      // all requested URLs are present, return the existing context\n      return this;\n    }\n\n    // 3. Some URLs are new, so fork, but don't invalidate anything\n    const newCache = this._cache.invalidate([]);\n    const newContext = this._fork(newCache);\n    return newContext._analyze(resolvedUrls);\n  }\n\n  /**\n   * Internal analysis method called when we know we need to fork.\n   */\n  private async _analyze(resolvedUrls: ResolvedUrl[]):\n      Promise<AnalysisContext> {\n    const analysisComplete = (async () => {\n      // 1. Load and scan all root documents\n      const scannedDocumentsOrWarnings =\n          await Promise.all(resolvedUrls.map(async (url) => {\n            try {\n              const scannedResult = await this.scan(url);\n              this._cache.failedDocuments.delete(url);\n              return scannedResult;\n            } catch (e) {\n              if (e instanceof WarningCarryingException) {\n                this._cache.failedDocuments.set(url, e.warning);\n              }\n              // We don't have the info to produce a good warning here,\n              // so we'll have go just fail at getDocument() :(\n            }\n          }));\n      const scannedDocuments = scannedDocumentsOrWarnings.filter(\n                                   (d) => d != null) as ScannedDocument[];\n      // 2. Run per-document resolution\n      const documents = scannedDocuments.map((d) => this.getDocument(d.url));\n      // TODO(justinfagnani): instead of the above steps, do:\n      // 1. Load and run prescanners\n      // 2. Run global analyzers (_languageAnalyzers now, but it doesn't need to\n      // be\n      //    separated by file type)\n      // 3. Run per-document scanners and resolvers\n      return documents;\n    })();\n    this._analysisComplete = analysisComplete.then((_) => {});\n    await this._analysisComplete;\n    return this;\n  }\n\n  /**\n   * Gets an analyzed Document from the document cache. This is only useful for\n   * Analyzer plugins. You almost certainly want to use `analyze()` instead.\n   *\n   * If a document has been analyzed, it returns the analyzed Document. If not\n   * the scanned document cache is used and a new analyzed Document is returned.\n   * If a file is in neither cache, it returns `undefined`.\n   */\n  getDocument(resolvedUrl: ResolvedUrl): Document|Warning {\n    const cachedWarning = this._cache.failedDocuments.get(resolvedUrl);\n    if (cachedWarning) {\n      return cachedWarning;\n    }\n    const cachedResult = this._cache.analyzedDocuments.get(resolvedUrl);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const scannedDocument = this._cache.scannedDocuments.get(resolvedUrl);\n    if (!scannedDocument) {\n      return makeRequestedWithoutLoadingWarning(resolvedUrl);\n    }\n\n    const extension = path.extname(resolvedUrl).substring(1);\n    const languageAnalyzer = this._languageAnalyzers.get(extension);\n    let analysisResult: any;\n    if (languageAnalyzer) {\n      analysisResult = languageAnalyzer.analyze(scannedDocument.url);\n    }\n\n    const document = new Document(scannedDocument, this, analysisResult);\n    this._cache.analyzedDocuments.set(resolvedUrl, document);\n    this._cache.analyzedDocumentPromises.getOrCompute(\n        resolvedUrl, async () => document);\n\n    document.resolve();\n    return document;\n  }\n\n  /**\n   * This is only useful for Analyzer plugins.\n   *\n   * If a url has been scanned, returns the ScannedDocument.\n   */\n  _getScannedDocument(resolvedUrl: ResolvedUrl): ScannedDocument|undefined {\n    return this._cache.scannedDocuments.get(resolvedUrl);\n  }\n\n  /**\n   * Clear all cached information from this analyzer instance.\n   *\n   * Note: if at all possible, instead tell the analyzer about the specific\n   * files that changed rather than clearing caches like this. Caching provides\n   * large performance gains.\n   */\n  clearCaches(): AnalysisContext {\n    return this._fork(new AnalysisCache());\n  }\n\n  /**\n   * Returns a copy of the context but with optional replacements of cache or\n   * constructor options.\n   *\n   * Note: this feature is experimental.\n   */\n  _fork(cache?: AnalysisCache, options?: ForkOptions): AnalysisContext {\n    const contextOptions: Options = {\n      lazyEdges: this._lazyEdges,\n      parsers: this.parsers,\n      scanners: this._scanners,\n      urlLoader: this.loader,\n      urlResolver: this.resolver,\n    };\n    if (options && options.urlLoader) {\n      contextOptions.urlLoader = options.urlLoader;\n    }\n    if (!cache) {\n      cache = this._cache.invalidate([]);\n    }\n    const copy =\n        new AnalysisContext(contextOptions, cache, this._generation + 1);\n    return copy;\n  }\n\n  /**\n   * Scans a file locally, that is for features that do not depend\n   * on this files imports. Local features can be cached even when\n   * imports are invalidated. This method does not trigger transitive\n   * scanning, _scan() does that.\n   *\n   * TODO(justinfagnani): consider renaming this to something like\n   * _preScan, since about the only useful things it can find are\n   * imports, exports and other syntactic structures.\n   */\n  private async _scanLocal(resolvedUrl: ResolvedUrl): Promise<ScannedDocument> {\n    return this._cache.scannedDocumentPromises.getOrCompute(\n        resolvedUrl, async () => {\n          try {\n            const parsedDoc = await this._parse(resolvedUrl);\n            const scannedDocument = await this._scanDocument(parsedDoc);\n\n            const imports =\n                scannedDocument.getNestedFeatures().filter(\n                    (e) => e instanceof ScannedImport) as ScannedImport[];\n\n            // Update dependency graph\n            const importUrls = filterOutUndefineds(imports.map(\n                (i) => i.url === undefined ?\n                    undefined :\n                    this.resolver.resolve(parsedDoc.baseUrl, i.url, i)));\n            this._cache.dependencyGraph.addDocument(resolvedUrl, importUrls);\n\n            return scannedDocument;\n          } catch (e) {\n            this._cache.dependencyGraph.rejectDocument(resolvedUrl, e);\n            throw e;\n          }\n        });\n  }\n\n  /**\n   * Scan a toplevel document and all of its transitive dependencies.\n   */\n  async scan(resolvedUrl: ResolvedUrl): Promise<ScannedDocument> {\n    return this._cache.dependenciesScannedPromises.getOrCompute(\n        resolvedUrl, async () => {\n          const scannedDocument = await this._scanLocal(resolvedUrl);\n          const imports =\n              scannedDocument.getNestedFeatures().filter(\n                  (e) => e instanceof ScannedImport) as ScannedImport[];\n\n          // Scan imports\n          for (const scannedImport of imports) {\n            if (scannedImport.url === undefined) {\n              continue;\n            }\n            const importUrl = this.resolver.resolve(\n                scannedDocument.document.baseUrl,\n                scannedImport.url,\n                scannedImport);\n            if (importUrl === undefined) {\n              continue;\n            }\n            // Request a scan of `importUrl` but do not wait for the results to\n            // avoid deadlock in the case of cycles. Later we use the\n            // DependencyGraph to wait for all transitive dependencies to load.\n            this.scan(importUrl).catch((error) => {\n              if (error == null || error.message == null) {\n                scannedImport.error = new Error(`Internal error.`);\n              } else {\n                scannedImport.error = error;\n              }\n            });\n          }\n          await this._cache.dependencyGraph.whenReady(resolvedUrl);\n          return scannedDocument;\n        });\n  }\n\n  /**\n   * Scans a ParsedDocument.\n   */\n  private async _scanDocument(\n      document: ParsedDocument, maybeAttachedComment?: string,\n      maybeContainingDocument?: ParsedDocument): Promise<ScannedDocument> {\n    const {features: scannedFeatures, warnings} =\n        await this._getScannedFeatures(document);\n    // If there's an HTML comment that applies to this document then we assume\n    // that it applies to the first feature.\n    const firstScannedFeature = scannedFeatures[0];\n    if (firstScannedFeature && firstScannedFeature instanceof ScannedElement) {\n      firstScannedFeature.applyHtmlComment(\n          maybeAttachedComment, maybeContainingDocument);\n    }\n\n    const scannedDocument =\n        new ScannedDocument(document, scannedFeatures, warnings);\n\n    if (!scannedDocument.isInline) {\n      if (this._cache.scannedDocuments.has(scannedDocument.url)) {\n        throw new Error(\n            'Scanned document already in cache. This should never happen.');\n      }\n      this._cache.scannedDocuments.set(scannedDocument.url, scannedDocument);\n    }\n    await this._scanInlineDocuments(scannedDocument);\n    return scannedDocument;\n  }\n\n  private async _getScannedFeatures(document: ParsedDocument) {\n    const scanners = this._scanners.get(document.type);\n    if (scanners) {\n      try {\n        return await scan(document, scanners);\n      } catch (e) {\n        if (e instanceof WarningCarryingException) {\n          throw e;\n        }\n        const message = e == null ? `Unknown error while scanning.` :\n                                    `Error while scanning: ${String(e)}`;\n        throw new WarningCarryingException(new Warning({\n          code: 'internal-scanning-error',\n          message,\n          parsedDocument: document,\n          severity: Severity.ERROR,\n          sourceRange: {\n            file: document.url,\n            start: {column: 0, line: 0},\n            end: {column: 0, line: 0},\n          }\n        }));\n      }\n    }\n    return {features: [], warnings: []};\n  }\n\n  private async _scanInlineDocuments(containingDocument: ScannedDocument) {\n    for (const feature of containingDocument.features) {\n      if (!(feature instanceof ScannedInlineDocument)) {\n        continue;\n      }\n      const locationOffset: LocationOffset = {\n        line: feature.locationOffset.line,\n        col: feature.locationOffset.col,\n        filename: containingDocument.url\n      };\n      try {\n        const parsedDoc = this._parseContents(\n            feature.type, feature.contents, containingDocument.url, {\n              locationOffset,\n              astNode: feature.astNode,\n              baseUrl: containingDocument.document.baseUrl\n            });\n        const scannedDoc = await this._scanDocument(\n            parsedDoc, feature.attachedComment, containingDocument.document);\n\n        feature.scannedDocument = scannedDoc;\n      } catch (err) {\n        if (err instanceof WarningCarryingException) {\n          containingDocument.warnings.push(err.warning);\n          continue;\n        }\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Returns `true` if the provided resolved URL can be loaded.  Obeys the\n   * semantics defined by `UrlLoader` and should only be used to check\n   * resolved URLs.\n   */\n  canLoad(resolvedUrl: ResolvedUrl): boolean {\n    return this.loader.canLoad(resolvedUrl);\n  }\n\n  /**\n   * Loads the content at the provided resolved URL.  Obeys the semantics\n   * defined by `UrlLoader` and should only be used to attempt to load resolved\n   * URLs.\n   *\n   * Currently does no caching. If the provided contents are given then they\n   * are used instead of hitting the UrlLoader (e.g. when you have in-memory\n   * contents that should override disk).\n   */\n  async load(resolvedUrl: ResolvedUrl): Promise<string> {\n    if (!this.canLoad(resolvedUrl)) {\n      throw new Error(`Can't load URL: ${resolvedUrl}`);\n    }\n    return await this.loader.load(resolvedUrl);\n  }\n\n  /**\n   * Caching + loading wrapper around _parseContents.\n   */\n  private async _parse(resolvedUrl: ResolvedUrl): Promise<ParsedDocument> {\n    return this._cache.parsedDocumentPromises.getOrCompute(\n        resolvedUrl, async () => {\n          const content = await this.load(resolvedUrl);\n          const extension = path.extname(resolvedUrl).substring(1);\n          return this._parseContents(extension, content, resolvedUrl);\n        });\n  }\n\n  /**\n   * Parse the given string into the Abstract Syntax Tree (AST) corresponding\n   * to its type.\n   */\n  private _parseContents(\n      type: string, contents: string, url: ResolvedUrl,\n      inlineInfo?: InlineDocInfo): ParsedDocument {\n    const parser = this.parsers.get(type);\n    if (parser == null) {\n      throw new NoKnownParserError(`No parser for for file type ${type}`);\n    }\n    try {\n      return parser.parse(contents, url, this.resolver, inlineInfo);\n    } catch (error) {\n      if (error instanceof WarningCarryingException) {\n        throw error;\n      }\n      const parsedDocument = new UnparsableParsedDocument(url, contents);\n      const message = error == null ? `Unable to parse as ${type}` :\n                                      `Unable to parse as ${type}: ${error}`;\n      throw new WarningCarryingException(new Warning({\n        parsedDocument,\n        code: 'parse-error',\n        message,\n        severity: Severity.ERROR,\n        sourceRange: {\n          file: url,\n          start: {line: 0, column: 0},\n          end: {line: 0, column: 0}\n        }\n      }));\n    }\n  }\n\n  /**\n   * Resolves all resolvable URLs in the list, removes unresolvable ones.\n   */\n  resolveUserInputUrls(urls: PackageRelativeUrl[]): ResolvedUrl[] {\n    return filterOutUndefineds(urls.map((u) => this.resolver.resolve(u)));\n  }\n}\n\nfunction filterOutUndefineds<T>(arr: ReadonlyArray<T|undefined>): T[] {\n  return arr.filter((t) => t !== undefined) as T[];\n}\n\n/**\n * A warning for a weird situation that should never happen.\n *\n * Before calling getDocument(), which is synchronous, a caller must first\n * have finished loading and scanning, as those phases are asynchronous.\n *\n * So we need to construct a warning, but we don't have a parsed document,\n * so we construct this weird fake one. This is such a rare case that it's\n * worth going out of our way here so that warnings can uniformly expect to\n * have documents.\n */\nfunction makeRequestedWithoutLoadingWarning(resolvedUrl: ResolvedUrl) {\n  const parsedDocument = new UnparsableParsedDocument(resolvedUrl, '');\n  return new Warning({\n    sourceRange: {\n      file: resolvedUrl,\n      start: {line: 0, column: 0},\n      end: {line: 0, column: 0}\n    },\n    code: 'unable-to-analyze',\n    message: `[Internal Error] Document was requested ` +\n        `before loading and scanning finished. This usually indicates an ` +\n        `anomalous error during loading or analysis. Please file a bug at ` +\n        `https://github.com/Polymer/polymer-analyzer/issues/new with info ` +\n        `on the source code that caused this. ` +\n        `Polymer Analyzer version: ${analyzerVersion}`,\n    severity: Severity.ERROR,\n    parsedDocument\n  });\n}\n"]}