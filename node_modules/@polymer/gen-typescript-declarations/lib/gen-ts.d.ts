/**
 * Configuration for declaration generation.
 */
export interface Config {
    /**
     * Skip source files whose paths match any of these glob patterns. If
     * undefined, defaults to excluding "index.html" and directories ending in
     * "test" or "demo".
     */
    excludeFiles?: string[];
    /**
     * The same as `excludeFiles`, for backwards compatibility. Will be removed in
     * next major version.
     */
    exclude?: string[];
    /**
     * Do not emit any declarations for features that have any of these
     * identifiers.
     */
    excludeIdentifiers?: string[];
    /**
     * Remove any triple-slash references to these files, specified as paths
     * relative to the analysis root directory.
     */
    removeReferences?: string[];
    /**
     * Additional files to insert as triple-slash reference statements. Given the
     * map `a: b[]`, a will get an additional reference statement for each file
     * path in b. All paths are relative to the analysis root directory.
     */
    addReferences?: {
        [filepath: string]: string[];
    };
    /**
     * Whenever a type with a name in this map is encountered, replace it with
     * the given name. Note this only applies to named types found in places like
     * function/method parameters and return types. It does not currently rename
     * e.g. entire generated classes.
     */
    renameTypes?: {
        [name: string]: string;
    };
}
/**
 * Analyze all files in the given directory using Polymer Analyzer, and return
 * TypeScript declaration document strings in a map keyed by relative path.
 */
export declare function generateDeclarations(rootDir: string, config: Config): Promise<Map<string, string>>;
